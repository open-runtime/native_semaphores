// Copyright (c) 2020, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: deprecated_member_use

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi';
import 'dart:typed_data';

// typedef _NativeHelloWorldFunction = Pointer<sem_t> Function(Pointer<Char>, Int, VarArgs<(mode_t, Int)>);

typedef NativeHelloWorldFunction = Pointer<sem_t> Function(
    Pointer<Char> name,
    Int oflag,
    VarArgs<
        (
          // UnsignedLong x2,
          // UnsignedLong x3,
          // UnsignedLong x4,
          // UnsignedLong x5,
          // UnsignedLong x6,
          // UnsignedLong x7,
          mode_t mode,
          UnsignedInt value
        )>);

/// Bindings to `hello_library/hello.h`.
class HelloWorld {
  /// Holds the symbol lookup function.
  final Pointer<T> Function<T extends NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HelloWorld(DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HelloWorld.fromLookup(Pointer<T> Function<T extends NativeType>(String symbolName) lookup) : _lookup = lookup;

  int __darwin_check_fd_set_overflow(
    int arg0,
    Pointer<Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr =
      _lookup<NativeFunction<Int Function(Int, Pointer<Void>, Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr.asFunction<int Function(int, Pointer<Void>, int)>();

  int open(
    Pointer<Char> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _openPtr = _lookup<NativeFunction<Int Function(Pointer<Char>, Int)>>('open');
  late final _open = _openPtr.asFunction<int Function(Pointer<Char>, int)>();

  int openat(
    int arg0,
    Pointer<Char> arg1,
    int arg2,
  ) {
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openatPtr = _lookup<NativeFunction<Int Function(Int, Pointer<Char>, Int)>>('openat');
  late final _openat = _openatPtr.asFunction<int Function(int, Pointer<Char>, int)>();

  int creat(
    Pointer<Char> arg0,
    int arg1,
  ) {
    return _creat(
      arg0,
      arg1,
    );
  }

  late final _creatPtr = _lookup<NativeFunction<Int Function(Pointer<Char>, mode_t)>>('creat');
  late final _creat = _creatPtr.asFunction<int Function(Pointer<Char>, int)>();

  int fcntl(
    int arg0,
    int arg1,
  ) {
    return _fcntl(
      arg0,
      arg1,
    );
  }

  late final _fcntlPtr = _lookup<NativeFunction<Int Function(Int, Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int openx_np(
    Pointer<Char> arg0,
    int arg1,
    filesec_t arg2,
  ) {
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openx_npPtr = _lookup<NativeFunction<Int Function(Pointer<Char>, Int, filesec_t)>>('openx_np');
  late final _openx_np = _openx_npPtr.asFunction<int Function(Pointer<Char>, int, filesec_t)>();

  int open_dprotected_np(
    Pointer<Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _open_dprotected_npPtr =
      _lookup<NativeFunction<Int Function(Pointer<Char>, Int, Int, Int)>>('open_dprotected_np');
  late final _open_dprotected_np = _open_dprotected_npPtr.asFunction<int Function(Pointer<Char>, int, int, int)>();

  int openat_dprotected_np(
    int arg0,
    Pointer<Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _openat_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _openat_dprotected_npPtr =
      _lookup<NativeFunction<Int Function(Int, Pointer<Char>, Int, Int, Int)>>('openat_dprotected_np');
  late final _openat_dprotected_np =
      _openat_dprotected_npPtr.asFunction<int Function(int, Pointer<Char>, int, int, int)>();

  int openat_authenticated_np(
    int arg0,
    Pointer<Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _openat_authenticated_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _openat_authenticated_npPtr =
      _lookup<NativeFunction<Int Function(Int, Pointer<Char>, Int, Int)>>('openat_authenticated_np');
  late final _openat_authenticated_np =
      _openat_authenticated_npPtr.asFunction<int Function(int, Pointer<Char>, int, int)>();

  int flock1(
    int arg0,
    int arg1,
  ) {
    return _flock1(
      arg0,
      arg1,
    );
  }

  late final _flock1Ptr = _lookup<NativeFunction<Int Function(Int, Int)>>('flock');
  late final _flock1 = _flock1Ptr.asFunction<int Function(int, int)>();

  filesec_t filesec_init() {
    return _filesec_init();
  }

  late final _filesec_initPtr = _lookup<NativeFunction<filesec_t Function()>>('filesec_init');
  late final _filesec_init = _filesec_initPtr.asFunction<filesec_t Function()>();

  filesec_t filesec_dup(
    filesec_t arg0,
  ) {
    return _filesec_dup(
      arg0,
    );
  }

  late final _filesec_dupPtr = _lookup<NativeFunction<filesec_t Function(filesec_t)>>('filesec_dup');
  late final _filesec_dup = _filesec_dupPtr.asFunction<filesec_t Function(filesec_t)>();

  void filesec_free(
    filesec_t arg0,
  ) {
    return _filesec_free(
      arg0,
    );
  }

  late final _filesec_freePtr = _lookup<NativeFunction<Void Function(filesec_t)>>('filesec_free');
  late final _filesec_free = _filesec_freePtr.asFunction<void Function(filesec_t)>();

  int filesec_get_property(
    filesec_t arg0,
    int arg1,
    Pointer<Void> arg2,
  ) {
    return _filesec_get_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_get_propertyPtr =
      _lookup<NativeFunction<Int Function(filesec_t, Int32, Pointer<Void>)>>('filesec_get_property');
  late final _filesec_get_property = _filesec_get_propertyPtr.asFunction<int Function(filesec_t, int, Pointer<Void>)>();

  int filesec_query_property(
    filesec_t arg0,
    int arg1,
    Pointer<Int> arg2,
  ) {
    return _filesec_query_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_query_propertyPtr =
      _lookup<NativeFunction<Int Function(filesec_t, Int32, Pointer<Int>)>>('filesec_query_property');
  late final _filesec_query_property =
      _filesec_query_propertyPtr.asFunction<int Function(filesec_t, int, Pointer<Int>)>();

  int filesec_set_property(
    filesec_t arg0,
    int arg1,
    Pointer<Void> arg2,
  ) {
    return _filesec_set_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_set_propertyPtr =
      _lookup<NativeFunction<Int Function(filesec_t, Int32, Pointer<Void>)>>('filesec_set_property');
  late final _filesec_set_property = _filesec_set_propertyPtr.asFunction<int Function(filesec_t, int, Pointer<Void>)>();

  int filesec_unset_property(
    filesec_t arg0,
    int arg1,
  ) {
    return _filesec_unset_property(
      arg0,
      arg1,
    );
  }

  late final _filesec_unset_propertyPtr =
      _lookup<NativeFunction<Int Function(filesec_t, Int32)>>('filesec_unset_property');
  late final _filesec_unset_property = _filesec_unset_propertyPtr.asFunction<int Function(filesec_t, int)>();

  int sem_close(
    Pointer<sem_t> arg0,
  ) {
    return _sem_close(
      arg0,
    );
  }

  late final _sem_closePtr = _lookup<NativeFunction<Int Function(Pointer<sem_t>)>>('sem_close');
  late final _sem_close = _sem_closePtr.asFunction<int Function(Pointer<sem_t>)>();

  int sem_destroy(
    Pointer<sem_t> arg0,
  ) {
    return _sem_destroy(
      arg0,
    );
  }

  late final _sem_destroyPtr = _lookup<NativeFunction<Int Function(Pointer<sem_t>)>>('sem_destroy');
  late final _sem_destroy = _sem_destroyPtr.asFunction<int Function(Pointer<sem_t>)>();

  int sem_getvalue(
    Pointer<sem_t> arg0,
    Pointer<Int> arg1,
  ) {
    return _sem_getvalue(
      arg0,
      arg1,
    );
  }

  late final _sem_getvaluePtr = _lookup<NativeFunction<Int Function(Pointer<sem_t>, Pointer<Int>)>>('sem_getvalue');
  late final _sem_getvalue = _sem_getvaluePtr.asFunction<int Function(Pointer<sem_t>, Pointer<Int>)>();

  int sem_init(
    Pointer<sem_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _sem_init(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sem_initPtr = _lookup<NativeFunction<Int Function(Pointer<sem_t>, Int, UnsignedInt)>>('sem_init');
  late final _sem_init = _sem_initPtr.asFunction<int Function(Pointer<sem_t>, int, int)>();

  Pointer<sem_t> sem_open(
    Pointer<Char> arg0,
    int arg1,
  ) {
    return _sem_open(
      arg0,
      arg1,
    );
  }

  late final _sem_openPtr = _lookup<NativeFunction<Pointer<sem_t> Function(Pointer<Char>, Int)>>('sem_open');
  late final _sem_open = _sem_openPtr.asFunction<Pointer<sem_t> Function(Pointer<Char>, int)>();

  int sem_post(
    Pointer<sem_t> arg0,
  ) {
    return _sem_post(
      arg0,
    );
  }

  late final _sem_postPtr = _lookup<NativeFunction<Int Function(Pointer<sem_t>)>>('sem_post');
  late final _sem_post = _sem_postPtr.asFunction<int Function(Pointer<sem_t>)>();

  int sem_trywait(
    Pointer<sem_t> arg0,
  ) {
    return _sem_trywait(
      arg0,
    );
  }

  late final _sem_trywaitPtr = _lookup<NativeFunction<Int Function(Pointer<sem_t>)>>('sem_trywait');
  late final _sem_trywait = _sem_trywaitPtr.asFunction<int Function(Pointer<sem_t>)>();

  int sem_unlink(
    Pointer<Char> arg0,
  ) {
    return _sem_unlink(
      arg0,
    );
  }

  late final _sem_unlinkPtr = _lookup<NativeFunction<Int Function(Pointer<Char>)>>('sem_unlink');
  late final _sem_unlink = _sem_unlinkPtr.asFunction<int Function(Pointer<Char>)>();

  int sem_wait(
    Pointer<sem_t> arg0,
  ) {
    return _sem_wait(
      arg0,
    );
  }

  late final _sem_waitPtr = _lookup<NativeFunction<Int Function(Pointer<sem_t>)>>('sem_wait');
  late final _sem_wait = _sem_waitPtr.asFunction<int Function(Pointer<sem_t>)>();

  Pointer<Int> __error() {
    return ___error();
  }

  late final ___errorPtr = _lookup<NativeFunction<Pointer<Int> Function()>>('__error');
  late final ___error = ___errorPtr.asFunction<Pointer<Int> Function()>();

  Pointer<sem_t> hello_world(Pointer<Char> name, int oflag, int mode, int value) {
    int x2 = 0;
    int x3 = 0;
    int x4 = 0;
    int x5 = 0;
    int x6 = 0;
    int x7 = 0;
    return _hello_world(
      name,
      oflag,
      // x2,
      // x3,
      // x4,
      // x5,
      // x6,
      // x7,
      mode,
      value,
    );
  }

  late final _hello_worldPtr = _lookup<NativeFunction<NativeHelloWorldFunction>>('hello_world');

  late final Pointer<sem_t> Function(
      Pointer<Char> name,
      int oflag,
      // int x2,
      // int x3,
      // int x4,
      // int x5,
      // int x6,
      // int x7,
      int mode,
      int value) _hello_world = _hello_worldPtr.cast<NativeFunction<NativeHelloWorldFunction>>().asFunction();
}

final class __mbstate_t extends Union {
  @Array.multi([128])
  external Array<Char> __mbstate8;

  @LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends Struct {
  external Pointer<NativeFunction<Void Function(Pointer<Void>)>> __routine;

  external Pointer<Void> __arg;

  external Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([56])
  external Array<Char> __opaque;
}

final class _opaque_pthread_cond_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([40])
  external Array<Char> __opaque;
}

final class _opaque_pthread_condattr_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([8])
  external Array<Char> __opaque;
}

final class _opaque_pthread_mutex_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([56])
  external Array<Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([8])
  external Array<Char> __opaque;
}

final class _opaque_pthread_once_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([8])
  external Array<Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([192])
  external Array<Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends Struct {
  @Long()
  external int __sig;

  @Array.multi([16])
  external Array<Char> __opaque;
}

final class _opaque_pthread_t extends Struct {
  @Long()
  external int __sig;

  external Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @Array.multi([8176])
  external Array<Char> __opaque;
}

@Packed(1)
final class _OSUnalignedU16 extends Struct {
  @Uint16()
  external int __val;
}

@Packed(1)
final class _OSUnalignedU32 extends Struct {
  @Uint32()
  external int __val;
}

@Packed(1)
final class _OSUnalignedU64 extends Struct {
  @Uint64()
  external int __val;
}

final class fd_set extends Struct {
  @Array.multi([32])
  external Array<__int32_t> fds_bits;
}

typedef __int32_t = Int;
typedef Dart__int32_t = int;

final class flock extends Struct {
  @off_t()
  external int l_start;

  @off_t()
  external int l_len;

  @pid_t()
  external int l_pid;

  @Short()
  external int l_type;

  @Short()
  external int l_whence;
}

typedef off_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = LongLong;
typedef Dart__int64_t = int;
typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;

final class timespec extends Struct {
  @__darwin_time_t()
  external int tv_sec;

  @Long()
  external int tv_nsec;
}

typedef __darwin_time_t = Long;
typedef Dart__darwin_time_t = int;

final class flocktimeout extends Struct {
  external flock fl;

  external timespec timeout;
}

final class radvisory extends Struct {
  @off_t()
  external int ra_offset;

  @Int()
  external int ra_count;
}

final class fsignatures extends Struct {
  @off_t()
  external int fs_file_start;

  external Pointer<Void> fs_blob_start;

  @Size()
  external int fs_blob_size;

  @Size()
  external int fs_fsignatures_size;

  @Array.multi([20])
  external Array<Char> fs_cdhash;

  @Int()
  external int fs_hash_type;
}

final class fsupplement extends Struct {
  @off_t()
  external int fs_file_start;

  @off_t()
  external int fs_blob_start;

  @Size()
  external int fs_blob_size;

  @Int()
  external int fs_orig_fd;
}

final class fchecklv extends Struct {
  @off_t()
  external int lv_file_start;

  @Size()
  external int lv_error_message_size;

  external Pointer<Void> lv_error_message;
}

final class fgetsigsinfo extends Struct {
  @off_t()
  external int fg_file_start;

  @Int()
  external int fg_info_request;

  @Int()
  external int fg_sig_is_platform;
}

final class fstore extends Struct {
  @UnsignedInt()
  external int fst_flags;

  @Int()
  external int fst_posmode;

  @off_t()
  external int fst_offset;

  @off_t()
  external int fst_length;

  @off_t()
  external int fst_bytesalloc;
}

final class fpunchhole extends Struct {
  @UnsignedInt()
  external int fp_flags;

  @UnsignedInt()
  external int reserved;

  @off_t()
  external int fp_offset;

  @off_t()
  external int fp_length;
}

final class ftrimactivefile extends Struct {
  @off_t()
  external int fta_offset;

  @off_t()
  external int fta_length;
}

final class fspecread extends Struct {
  @UnsignedInt()
  external int fsr_flags;

  @UnsignedInt()
  external int reserved;

  @off_t()
  external int fsr_offset;

  @off_t()
  external int fsr_length;
}

@Packed(4)
final class log2phys extends Struct {
  @UnsignedInt()
  external int l2p_flags;

  @off_t()
  external int l2p_contigbytes;

  @off_t()
  external int l2p_devoffset;
}

final class _filesec extends Opaque {}

abstract class filesec_property_t {
  static const int FILESEC_OWNER = 1;
  static const int FILESEC_GROUP = 2;
  static const int FILESEC_UUID = 3;
  static const int FILESEC_MODE = 4;
  static const int FILESEC_ACL = 5;
  static const int FILESEC_GRPUUID = 6;
  static const int FILESEC_ACL_RAW = 100;
  static const int FILESEC_ACL_ALLOCSIZE = 101;
}

typedef mode_t = UnsignedLong;
// typedef __darwin_mode_t = __uint16_t;
// typedef __uint16_t = UnsignedShort;
typedef Dart__uint16_t = int;
typedef filesec_t = Pointer<_filesec>;
typedef sem_t = Int;
typedef Dartsem_t = int;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int USER_ADDR_NULL = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_13_0 = 130000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 130000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 130300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_ACCMODE = 3;

const int FREAD = 1;

const int FWRITE = 2;

const int O_NONBLOCK = 4;

const int O_APPEND = 8;

const int O_SYNC = 128;

const int O_SHLOCK = 16;

const int O_EXLOCK = 32;

const int O_ASYNC = 64;

const int O_FSYNC = 128;

const int O_NOFOLLOW = 256;

const int O_CREAT = 512;

const int O_TRUNC = 1024;

const int O_EXCL = 2048;

const int O_EVTONLY = 32768;

const int O_NOCTTY = 131072;

const int O_DIRECTORY = 1048576;

const int O_SYMLINK = 2097152;

const int O_DSYNC = 4194304;

const int O_CLOEXEC = 16777216;

const int O_NOFOLLOW_ANY = 536870912;

const int O_EXEC = 1073741824;

const int O_SEARCH = 1074790400;

const int AT_FDCWD = -2;

const int AT_EACCESS = 16;

const int AT_SYMLINK_NOFOLLOW = 32;

const int AT_SYMLINK_FOLLOW = 64;

const int AT_REMOVEDIR = 128;

const int AT_REALDEV = 512;

const int AT_FDONLY = 1024;

const int AT_SYMLINK_NOFOLLOW_ANY = 2048;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int O_DP_AUTHENTICATE = 4;

const int AUTH_OPEN_NOAUTHFD = -1;

const int FAPPEND = 8;

const int FASYNC = 64;

const int FFSYNC = 128;

const int FFDSYNC = 4194304;

const int FNONBLOCK = 4;

const int FNDELAY = 4;

const int O_NDELAY = 4;

const int CPF_OVERWRITE = 1;

const int CPF_IGNORE_MODE = 2;

const int CPF_MASK = 3;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int F_GETOWN = 5;

const int F_SETOWN = 6;

const int F_GETLK = 7;

const int F_SETLK = 8;

const int F_SETLKW = 9;

const int F_SETLKWTIMEOUT = 10;

const int F_FLUSH_DATA = 40;

const int F_CHKCLEAN = 41;

const int F_PREALLOCATE = 42;

const int F_SETSIZE = 43;

const int F_RDADVISE = 44;

const int F_RDAHEAD = 45;

const int F_NOCACHE = 48;

const int F_LOG2PHYS = 49;

const int F_GETPATH = 50;

const int F_FULLFSYNC = 51;

const int F_PATHPKG_CHECK = 52;

const int F_FREEZE_FS = 53;

const int F_THAW_FS = 54;

const int F_GLOBAL_NOCACHE = 55;

const int F_ADDSIGS = 59;

const int F_ADDFILESIGS = 61;

const int F_NODIRECT = 62;

const int F_GETPROTECTIONCLASS = 63;

const int F_SETPROTECTIONCLASS = 64;

const int F_LOG2PHYS_EXT = 65;

const int F_GETLKPID = 66;

const int F_SETBACKINGSTORE = 70;

const int F_GETPATH_MTMINFO = 71;

const int F_GETCODEDIR = 72;

const int F_SETNOSIGPIPE = 73;

const int F_GETNOSIGPIPE = 74;

const int F_TRANSCODEKEY = 75;

const int F_SINGLE_WRITER = 76;

const int F_GETPROTECTIONLEVEL = 77;

const int F_FINDSIGS = 78;

const int F_ADDFILESIGS_FOR_DYLD_SIM = 83;

const int F_BARRIERFSYNC = 85;

const int F_ADDFILESIGS_RETURN = 97;

const int F_CHECK_LV = 98;

const int F_PUNCHHOLE = 99;

const int F_TRIM_ACTIVE_FILE = 100;

const int F_SPECULATIVE_READ = 101;

const int F_GETPATH_NOFIRMLINK = 102;

const int F_ADDFILESIGS_INFO = 103;

const int F_ADDFILESUPPL = 104;

const int F_GETSIGSINFO = 105;

const int F_SETLEASE = 106;

const int F_GETLEASE = 107;

const int F_TRANSFEREXTENTS = 110;

const int FCNTL_FS_SPECIFIC_BASE = 65536;

const int F_DUPFD_CLOEXEC = 67;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 1;

const int F_UNLCK = 2;

const int F_WRLCK = 3;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int S_IFMT = 61440;

const int S_IFIFO = 4096;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_IFWHT = 57344;

const int S_IRWXU = 448;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXG = 56;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXO = 7;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_ISTXT = 512;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int F_ALLOCATECONTIG = 2;

const int F_ALLOCATEALL = 4;

const int F_ALLOCATEPERSIST = 8;

const int F_PEOFPOSMODE = 3;

const int F_VOLPOSMODE = 4;

const int USER_FSIGNATURES_CDHASH_LEN = 20;

const int GETSIGSINFO_PLATFORM_BINARY = 1;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int O_POPUP = 2147483648;

const int O_ALERT = 536870912;

const int FILESEC_GUID = 3;

const int SEM_VALUE_MAX = 32767;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EDEADLK = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EAGAIN = 35;

const int EWOULDBLOCK = 35;

const int EINPROGRESS = 36;

const int EALREADY = 37;

const int ENOTSOCK = 38;

const int EDESTADDRREQ = 39;

const int EMSGSIZE = 40;

const int EPROTOTYPE = 41;

const int ENOPROTOOPT = 42;

const int EPROTONOSUPPORT = 43;

const int ESOCKTNOSUPPORT = 44;

const int ENOTSUP = 45;

const int EPFNOSUPPORT = 46;

const int EAFNOSUPPORT = 47;

const int EADDRINUSE = 48;

const int EADDRNOTAVAIL = 49;

const int ENETDOWN = 50;

const int ENETUNREACH = 51;

const int ENETRESET = 52;

const int ECONNABORTED = 53;

const int ECONNRESET = 54;

const int ENOBUFS = 55;

const int EISCONN = 56;

const int ENOTCONN = 57;

const int ESHUTDOWN = 58;

const int ETOOMANYREFS = 59;

const int ETIMEDOUT = 60;

const int ECONNREFUSED = 61;

const int ELOOP = 62;

const int ENAMETOOLONG = 63;

const int EHOSTDOWN = 64;

const int EHOSTUNREACH = 65;

const int ENOTEMPTY = 66;

const int EPROCLIM = 67;

const int EUSERS = 68;

const int EDQUOT = 69;

const int ESTALE = 70;

const int EREMOTE = 71;

const int EBADRPC = 72;

const int ERPCMISMATCH = 73;

const int EPROGUNAVAIL = 74;

const int EPROGMISMATCH = 75;

const int EPROCUNAVAIL = 76;

const int ENOLCK = 77;

const int ENOSYS = 78;

const int EFTYPE = 79;

const int EAUTH = 80;

const int ENEEDAUTH = 81;

const int EPWROFF = 82;

const int EDEVERR = 83;

const int EOVERFLOW = 84;

const int EBADEXEC = 85;

const int EBADARCH = 86;

const int ESHLIBVERS = 87;

const int EBADMACHO = 88;

const int ECANCELED = 89;

const int EIDRM = 90;

const int ENOMSG = 91;

const int EILSEQ = 92;

const int ENOATTR = 93;

const int EBADMSG = 94;

const int EMULTIHOP = 95;

const int ENODATA = 96;

const int ENOLINK = 97;

const int ENOSR = 98;

const int ENOSTR = 99;

const int EPROTO = 100;

const int ETIME = 101;

const int EOPNOTSUPP = 102;

const int ENOPOLICY = 103;

const int ENOTRECOVERABLE = 104;

const int EOWNERDEAD = 105;

const int EQFULL = 106;

const int ELAST = 106;

const String SEM_NAME = '/20240404-1655-8b34-9829-eb8dabd81c5f';
